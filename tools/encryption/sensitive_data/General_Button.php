<?php
namespace ITRocks\Framework\Tools\Encryption\Sensitive_Data;

use ITRocks\Framework\Component\Button;
use ITRocks\Framework\Component\Button\Has_General_Buttons;
use ITRocks\Framework\Controller\Feature;
use ITRocks\Framework\Feature\Edit;
use ITRocks\Framework\Feature\List_;
use ITRocks\Framework\Feature\Output;
use ITRocks\Framework\Reflection\Annotation\Property\Encrypt_Annotation;
use ITRocks\Framework\Reflection\Reflection_Class;
use ITRocks\Framework\Session;
use ITRocks\Framework\Setting;
use ITRocks\Framework\Tools\Encryption;
use ITRocks\Framework\View;

/**
 * @extends Edit\Controller
 * @extends List_\Controller
 * @extends Output\Controller
 * @use Has_General_Buttons
 */
trait General_Button
{

	//----------------------------------------------------------------------------- getGeneralButtons
	/**
	 * Gets the default general buttons (general buttons generated by the controller)
	 * This can be overridden to add default buttons to your controller
	 *
	 * @param $object     object|string The context object or class name
	 * @param $parameters array Parameters prepared for the view
	 * @param $settings   Setting\Custom\Set|null The controller custom settings, if set
	 * @return Button[]
	 */
	public function getGeneralButtons($object, array $parameters, Setting\Custom\Set $settings = null)
	{
		/** @noinspection PhpUndefinedClassInspection Has_General_Buttons */
		/** @see Has_General_Buttons::getGeneralButtons */
		$buttons = parent::getGeneralButtons($object, $parameters, $settings);
		if (!$this->hasSensitiveData(is_string($object) ? $object : get_class($object))) {
			return $buttons;
		}
		/** @noinspection PhpUndefinedClassConstantInspection Controller::FEATURE is always set */
		$feature       = $parameters[Feature::FEATURE] ?? static::FEATURE;
		$after_feature = match($feature) {
			Feature::F_EDIT   => Feature::F_SAVE,
			Feature::F_LIST   => Feature::F_ADD,
			Feature::F_OUTPUT => Feature::F_EDIT,
			default           => null
		};
		$button = new Button(
			'Sensitive data',
			View::link($object, $feature),
			Encryption::SENSITIVE_DATA
		);
		$after_feature
			? arrayInsertAfter($buttons, [$button], $after_feature)
			: array_unshift($buttons, $button);
		return $buttons;
	}

	//------------------------------------------------------------------------------ hasSensitiveData
	private function hasSensitiveData(string $class_name) : bool
	{
		$cache =& Session::current()->get(Cache::class, true)->have_sensitive_data;
		if (isset($cache[$class_name])) {
			return $cache[$class_name];
		}
		/** @noinspection PhpUnhandledExceptionInspection */
		foreach ((new Reflection_Class($class_name))->getProperties() as $property) {
			if (Encrypt_Annotation::of($property)->value === Encryption::SENSITIVE_DATA) {
				return $cache[$class_name] = true;
			}
		}
		return $cache[$class_name] = false;
	}

}
